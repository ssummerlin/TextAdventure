import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'com.github.spotbugs' version '4.7.1'
    id 'com.adarshr.test-logger' version '3.0.0'
}

repositories {
    mavenCentral()
}

checkstyle {
    sourceSets = [sourceSets.main]
    configFile = file("$rootDir/LibrariesAndUtilities/ATACheckstyle/configuration/checkstyle/checkstyle.xml")
    configProperties.put('checkstyle.suppression.filter', "$rootDir/LibrariesAndUtilities/ATACheckstyle/configuration/checkstyle/suppressions.xml")
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled true
        html.enabled true
    }
}

// for use with the Gradle Java Plugin
sourceSets {
    main {
        java {
            srcDirs = ['src/']
        }
        resources {
            srcDirs = ['src/main/resources/']
        }
    }
    test {
        java {
            srcDirs = ['tst/']
        }
        resources {
            srcDirs = ['tst/resources/']
        }
    }
}

spotbugs {
    spotbugsTest.enabled = false
    ignoreFailures = true
}

checkstyleMain {

}

spotbugsMain {
    reports {
        html {
            enabled = true
        }
    }
}

dependencies {
    implementation 'org.junit.jupiter:junit-jupiter:5.7.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'

    implementation 'com.google.guava:guava:30.1.1-jre'

    implementation 'org.mockito:mockito-core:3.11.2'
    implementation files("$rootDir/LibrariesAndUtilities/ATAResources.jar")
    implementation files("$rootDir/LibrariesAndUtilities/core-3.3.7.jar")
}

test {
    useJUnitPlatform()

    testlogger {
        theme 'plain'
        logLevel 'quiet'
    }

    testLogging {
        // set options for log level LIFECYCLE
        events TestLogEvent.FAILED,
                TestLogEvent.PASSED,
                TestLogEvent.SKIPPED,
                TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
        showExceptions true
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events TestLogEvent.STARTED,
                    TestLogEvent.FAILED,
                    TestLogEvent.PASSED,
                    TestLogEvent.SKIPPED,
                    TestLogEvent.STANDARD_ERROR,
                    TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))

                def scoringPercentage = result.testCount - result.failedTestCount
                if (scoringPercentage < 0) {
                    scoringPercentage = 0.0
                }

                scoringPercentage = scoringPercentage / result.testCount
                def scoringPercentageAsString = String.format("%.2f", scoringPercentage)
                println("Exit Result for Scoring: " + scoringPercentageAsString)
            }
        }
    }
}

project.configurations.implementation.setCanBeResolved(true)
jar {
    manifest {
        attributes(
                "Main-Class": "processing.sketches.Main",
                "Class-Path": configurations.implementation.collect { it.name }.join(' ')
        )
    }
    dependsOn('dependencies')
}